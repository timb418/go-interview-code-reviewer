В рамках подготовки к собеседованиям на бэкенд-разработчика Go я практикуюсь в решении задач, которые часто встречаются на технических интервью. Это задания формата "анализ кода" (вывод, ошибки, рефакторинг). Твоя цель - проверить постановку задач ниже. Ниже - некоторые правила, на которые тебе надо ориентироваться.
Ниже представлен формальный набор правил для проверяльщика, цель которого — проверить корректность постановки задач в контексте технических интервью на позицию бэкенд-разработчика на Go. Эти правила помогут гарантировать, что задачи задаются однозначно, содержат минимальное необходимое описание и не включают подсказки, способные упростить решение для кандидата.
Отсутствие явных подсказок
Запрещённые комментарии с подсказками:
В исходном коде не допускается наличие комментариев, явно указывающих на последствия определённых действий (например, "// Эта строка вызовет панику").
Нейтральные комментарии:
Если комментарии используются для структурирования или пояснения синтаксиса, они должны быть максимально нейтральными и не должны намекать на логику исправления или указывать, что именно является ошибкой.
Компактность и однозначность постановки задачи
Ясное описание проблемы:
Задача должна быть сформулирована так, чтобы кандидат однозначно понимал, что требуется сделать. Описание должно избегать двусмысленностей, но не раскрывать решения.
Минимальное количество вспомогательной информации:
Необходимо включать только те детали, которые нужны для понимания контекста. Лишняя информация, которая может дать подсказки или намеки, должна быть исключена.
Отсутствие «подсказочных» структур:
Никакие конструкции или комментарии к коду не должны давать понять, что определённое решение или подход является предпочтительным. Вся логика должна быть представлена таким образом, чтобы кандидат самостоятельно проводил анализ.
Точность тестовых примеров (если применимо)
Корректные и независимые тесты:
Если к задаче прилагается код с тестовыми примерами, они должны быть сконструированы таким образом, чтобы не давать прямых указаний на причину возникновения ошибки или на порядок исправления.
Разделение тестового кода и логики:
Тесты и вспомогательный код (например, функции тестирования) не должны пересекаться с основным кодом решения, чтобы исключить возможность получить подсказку по решению.
Контроль за скрытыми подсказками
Автоматический анализ комментариев:
Проверяльщик должен искать шаблоны комментариев, содержащих явно выраженные указания («подсказки») на возможные ошибки, даже если они не являются прямыми комментариями к строкам кода.
Проверка описания задачи:
Текст задания (описание проблемы, цели, требований) не должен содержать указаний, предполагающих конкретные варианты реализации или объяснений, которые облегчают принятие решения кандидатом.
Дополнительные рекомендации
Проверка на избыточность:
Все элементы задачи (описание, код, тесты) должны оцениваться на предмет избыточной информации. Если какой-либо фрагмент кода или пояснения дублируют содержимое, которое может указывать на верное решение, его следует убрать или переформулировать.
Контекст задачи:
Задача должна имитировать реальную ситуацию, встречающуюся на собеседовании, с минимальным набором деталей, гарантируя, что кандидат будет вынужден самостоятельно проводить анализ и искать оптимальное решение.
Ниже задачи, которые тебе надо проверить. Если задача соответствует правилам, не пиши ничего про нее. Если не соответствует, напиши номер задачи и краткое описание того, что не так. Не выводи исправленный вариант, просто скажи мне, в чем проблема  и где.
