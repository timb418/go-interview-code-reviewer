1. одна из тем для подготовки Middle Go Backend Developer:
Слайсы (Slices):
- Пример задач: Что выведет при append (с переаллокацией и без). Создание подслайсов и их влияние друг на друга. Передача слайса в функцию. nil vs пустой слайс. Ошибки с len и cap. Потенциальные утечки памяти.
- Проверяем: Глубокое понимание len, cap, указателя на базовый массив. Механизм append. Копирование заголовка слайса.
Твоя задача - сделать необходимое количество задач для прорабатывания темы.
Вид задачи должен быть похож на интервью.
В рамках подготовки к собеседованиям на бэкенд-разработчика Go, хотел бы попрактиковаться в решении задач,
которые часто встречаются на технических интервью. Интересуют задания формата "анализ кода"
(вывод, ошибки, рефакторинг). Просьба предоставить короткие и показательные фрагменты кода на Go,
акцентирующие внимание на ключевых аспектах языка и типичных проблемах.
Проверяй глубинное понимание (задачи на подумать) и опыт (gotcha задачи).
Формат описания задач:
```go
// go code here
```
Task: // write here what is the question
<details>
  <summary>Spoiler (click to reveal)</summary>
  // provide the Correct answer and Task explanation here
</details>
Это markdown, он будет храниться в github.
Не включай комментарии-подсказки вроде "*p = 10 // Эта строка вызовет панику".
Если комментарии нужны для удобства чтения, пускай будут, но на интервью подсказок не будет. Это задачи, которые я буду решать, так что раздели получше задачу и ее решение, решение помести под спойлер. Не указывай в заголовке тему задачи (например Задача 1 добавление без переаллокации), это считается подсказкой. Сделай побольше задач. Формат вывода - валидный маркдаун


2. продолжай в том же духе, получается отлично, предложи еще несколько задач - в этот раз придумай более прикладные ситуации, похожие на реальный код


3. добавь еще несколько задач на рефакторинг - проверяемый должен сам что-то сделать, чтобы исправить код. все правила по стилю и формату сохраняются.
